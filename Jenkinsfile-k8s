def deployKubernetesResources() {
    dir('DevOps-Crypto') {
        // Starts the Kubernetes cluster on local Docker for Desktop
        // Aplyying all the needed yaml files
        sh 'kubectl apply -f app-deploy.yml'
        sh 'kubectl apply -f app-service.yml'
        sh 'kubectl apply -f db-deploy.yml'
        sh 'kubectl apply -f db-service.yml'
        sh 'kubectl apply -f init-job.yml'
        // Using rollout to start update to pods 
        sh 'kubectl rollout restart deployment/flask-app'
        // Checks everything is up befor moving on
        sh 'chmod +x Gcloud-status.sh'
        sh 'bash Gcloud-status.sh'
    }
}
def deleteKubernetesResources() {
    dir('DevOps-Crypto'){
        // Removes all yaml files to make sure the cluster is empty
        sh 'kubectl delete -f app-deploy.yml'
        sh 'kubectl delete -f app-service.yml'
        sh 'kubectl delete -f db-deploy.yml'
        sh 'kubectl delete -f db-service.yml'
        sh 'kubectl delete -f init-job.yml'
    }
}
def runKubernetesTests() {
    // Gets the test cluster ip and runs test
    sh 'chmod +x DevOps-Crypto/k8s-tests.sh'
    sh 'bash ./DevOps-Crypto/k8s-tests.sh'
}
def getClusterIP() {
    // Gets the prod cluster ip and showes it at the end of the pipeline
    sh 'chmod +x DevOps-Crypto/Load-Balancer-IP.sh'
    sh 'bash DevOps-Crypto/Load-Balancer-IP.sh'
}
pipeline {
    agent any
    stages {
        stage('Clonnig Git Repo And Cleaning Workspace') {
            steps {
                // Clean Up Project Files And Clone Git - To Update The Project
                sh 'rm -rf *'
                sh 'git clone https://github.com/Roy-Latin/DevOps-Crypto.git'
            }
        }

        stage('Build And Push The Image To Docker Hub') {
            steps {
                    // Creates Docker Image
                    dir('DevOps-Crypto'){
                    sh 'docker build -t roylatin/devops-crypto:4.${BUILD_NUMBER} -t roylatin/devops-crypto:latest .'
                    }
                    // Pushes Docker Image To Docker Hub - creates a image with a build number and latest
                    sh 'docker push roylatin/devops-crypto:4.${BUILD_NUMBER}'
                    sh 'docker push roylatin/devops-crypto:latest'

                    // Cleanup old Docker images
                    sh "docker image ls --format '{{.ID}}' roylatin/devops-crypto --filter 'dangling=false' | sort -r | awk 'NR>3' | xargs -I {} docker image rm -f {}"            
            }
        }

        stage('Running K8S On GCloud Test Cluster') {
            steps {
                // Switches to the test cluster
                sh 'gcloud container clusters get-credentials autopilot-cluster-1 --project onyx-seeker-393207 --region us-central1'
                script {
                    // Starts the cluster
                    deployKubernetesResources()
                     catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        runKubernetesTests()
                    }
                }
            }
        }

        stage('Shutting Off GCloud Test Cluster') {
            steps {
                // Turns off the cluster 
                sh 'gcloud container clusters get-credentials autopilot-cluster-1 --project onyx-seeker-393207 --region us-central1'
                deleteKubernetesResources()
            }
        }

        stage('Running K8S On GCloud Prod Cluster') {
            steps {
                // Switch to the prod cluster 
                sh 'gcloud container clusters get-credentials deploy-flask-app --project onyx-seeker-393207 --region us-central1'
                // Starts cluster and get the ip at the end
                deployKubernetesResources()
                getClusterIP()
            }
        }
    }
}